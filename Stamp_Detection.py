import os
import threading
import webbrowser

import PySimpleGUI as sg
import cv2
import fitz
import numpy as np
import pandas as pd

MATRIX = fitz.Matrix(0.2, 0.2)
ROOT = './cache/'
LOWER_RED_1 = np.array([0, 5, 5])
UPPER_RED_1 = np.array([10, 255, 255])
LOWER_RED_2 = np.array([156, 5, 5])
UPPER_RED_2 = np.array([180, 255, 255])
EXPAND = np.ones((4, 4), np.uint8)
VERSION = 'V0.1.0'
ICO = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\xc8\x00\x00\x00\xc8\x08\x06\x00\x00\x00\xadX\xae\x9e\x00\x00' \
      b'\x00\x01sRGB\x00\xae\xce\x1c\xe9\x00\x00\x16\xb5IDATx^\xed]y\x9c%eu=\xb7\xbag\xb0\x9ba\x99\xee\xae\x87\x82' \
      b'\xc6\x08A\x03\x0e\x8a"\x02n \xf9\x89\x180\x88\xfe\x84\x9f\x821j\x90(\x82,\xd3U\xcd\xa2i\x828]\xd5\xa3\xa0 ' \
      b'\x89\x0b.$\xe2\xb8\xc4\x15\x05\x02F\xd0\x11\x01\x89\n\x12\xc4\r\x100\x84\xaa\x9e\x19\x86e\xd6\xeew\xf2\xabf0' \
      b'\xc30K\xdd\xefm\xf5\xdew\xeb\xdf9\xe7\xde\xfb\x9d\xfb\x9dy\xfd^}\x8b\xc0\x1eS\xc0\x14\xd8\xa2\x02b\xda\x98' \
      b'\x02\xa6\xc0\x96\x150\x83\xd8\xec0\x05\xb6\xa2\x80\x19\xc4\xa6\x87)`\x06\xb19`\n\xb8)`\x9f ' \
      b'n\xba\x19\xcb\x13\x05\xcc \x9e4\xda\x86\xe9\xa6\x80\x19\xc4M7cy\xa2\x80\x19\xc4\x93F\xdb0\xdd\x140\x83\xb8' \
      b'\xe9f,O\x140\x83x\xd2h\x1b\xa6\x9b\x02f\x107\xdd\x8c\xe5\x89\x02f\x10O\x1am\xc3tS\xc0\x0c\xe2\xa6\x9b\xb1<Q' \
      b'\xc0\x0c\xe2I\xa3m\x98n\n\x98A\xdct3\x96\'\n\x98A<i\xb4\r\xd3M\x013\x88\x9bn\xc6\xf2D\x013H\x07\x1b];\x8b\xbb' \
      b'\xcc\x10\xf3\xb9\x1e\xf3%\xc0L@\xacX\xd3\x8f\xe5\x8f,\x92e\x1d,' \
      b'\xcbRo\xa4\x80\x19\xa4\x85\xd3a$\xe2\x0e\x01p`\x1d8P\x04\x07\x80\xd8M\x04C\x04\x86\x04\x98\xb7\xb5\xd4\x04V\n' \
      b'\xb1\x9c\x82\xe5 \xee&qC\x9d\xb8q\xf9b\xf9I\x0bK\xb6\xd0\x9b(' \
      b'`\x06i\xe2\x94\x18:\x99;\x06\x83\xf8\xeb\x808\x98\x82\x83\x04xa\x13\xc3\xff)\x14\x81\xa5\x04n\x10\xe0\xba' \
      b'<\x91+[\x91\xc3b>\xae\x80\x19\xa4\t3ax\x8c\xfb\x07u\xbcG\x04\xc7\x02\x18lB\xc8\xd2!H\xfc/\x80Kg\xa6\xf1\xc9' \
      b'\xe5\x1f\x95\xfbJ\x13\rXJ\x013H)\x996\x03\x1ag\xff\xc8*\x1c\x1b\x00\xa7@\xf0R\xd70\xcd\xe2\x91\x98\x81\xe0' \
      b'\x9b\x00.\xcc\x13Y\xda\xac\xb8\xbe\xc71\x838\xcc\x80\xe1\x98\xc7\x07@*\xc03\x1c\xe8\xed\xa0\xdc\x04\xe0\xc4,' \
      b'\x91[\xdb\x91\xac\x97s\x98A\x14\xdd\rG\xf9t\x04\xf8\x82\x00\x87)h\x1d\x81\x12\x98\x060\x91\x0f\xe0<\x8c\xcb' \
      b'\xba\x8e\x14\xd1\x03I\xcd %\x9b8\x12\xf18\x01.\x16\xc1\xce%)\x95\x80\x91\xf8U\xbd\x0fo\\\xb6H\xee\xacDA]V\x84' \
      b'\x19d\x1b\r+~\xaa\x15\xc1g\x048\xa6\xcbz\xfb\xa4r\xeb\xc4iS\xa9\\\xd8\xcdc\xe8D\xedf\x90\xad\xa8>\x12q\xd7@p' \
      b'\r\x80\xbd;\xd1\x9cf\xe7$\xf0\xd9|\x00\'`\\\xea\xcd\x8e\xdd\xab\xf1\xcc [' \
      b'\xe8\xec\xd0\x19\xdc\xbb\xaf\x1f\xd7V\xf8\x8b\xb8\xd3\x9c$\xf0\x1f\xf9\x00\x8e\xc6\xb8\xacr\n\xe0\x19\xc9\x0c' \
      b'\xb2\x99\x86\x17K@8\x8d_\x88\xe0\xe9=9\x1f\x88of\xa9\x1c\xdd\x93ck\xf2\xa0\xcc ' \
      b'\x9b\n:\xce\xb9\xb5U\xf8)\x04/h\xb2\xd6\xd5\nG\x8cg\xa9\x9c[\xad\xa2\xaaW\x8d\x19d\x93\x9e\xd4b~\x11\xc0[[' \
      b'\xd2*\xe2\xb6\xba\xe0\xc7\x01\x91\x95\x8a/\xd8\x83\xc4A"\xd8\xa3\x14^\t\xaa\xd7\xf1\xfa\xa9I\xb9BI\xf3\nn\x06' \
      b'\xd9\xa8\xdd\xe1\x18\xffN\x88\xcf5k\x06\x90\xf8=\x05\x97\x91\xf8q0\x88\x9b\xf2qy\xd4%\xf6\x0egrxn\x1d\xaf\x08' \
      b'\x88CD\xf06\x00\xc3.q6\xe5\x14\x0b"g\x88\x05\xcbS\xb9\xbf\x19\xf1z1\x86\x19dCW\xc3Q\xee)\x01~\xd1\xf0Z*\xe21' \
      b'\x02_\x81\xe0\xb3\xadZ\xf21\x1c\xf1\r\x01\xf0.\x11\x1c\xd9\xe8\xa4$\xf1\xa3<\x95W5\x1a\xa7W\xf9f\x90\'\x0c' \
      b'\x12q\xa9\x08^\xdeP\xa3\x89/\xadY\x8f\xf7=|\x81,' \
      b'o(NI\xf2\xc8\x99|\xae\xd4q\xb9\x00\xfb\x95\xa4l\x16V\xaf\xe3\xf4\xa9I\xb9\xa0\x91\x18\xbd\xca5\x83\x00\x08Gy' \
      b'\xac\x04X\xd2@\x93\x1f\xac\x03\'L%\xf2\x9d\x06b\xb8Q\xc7\x19\x84\xab0*\xc0\xb9\x10l\xe7\x14\x84X\xbdn\x06{' \
      b'=\xf4\x11\xf9\x83\x13\xbf\x87If\x90\xc2 ' \
      b'1\xef\x17`7\xa7>\x13?Y\x1b\xe0\x88\x95\x13\xb2\xc2\x89\xdf$\xd2\xfc\x85\\0\'\xc0\xf7!\xa8\xb9\x84$\xf1\xf5' \
      b'<\x957\xb9p{\x99\xe3\xbdAF"\x9e\x1a\x08\\\xff\xbc\xb8Afp\xd8\x83\x8b\xe5\xb1*L\x92\x9d\x16\xf29\xdb\xf5\xa1' \
      b'\xd8q\xb8\x8b\xb6\x1e\x12\\\x1f`\xf7\x87&\xe4\x1e-\xb7\x97\xf1~\x1b\xe4dnW\x1b\xc4\x1f]~\x15b\xb1\x9bo\x00' \
      b'\xaf\xc3\xb8\xac\xa9\xd2\x04)L2\xb7\x0f?r\xfaD$>\x95\xa5rb\x95\xc6\xd3\xe9Z\xbc6\xc8\xc8(' \
      b'\xdf\x1d\x04\xf8\xa4\xb6\t\x04\x1e \xf1\xbc\xa9T\x1e\xd1r\xdb\x81/v8\xf6\x117\xbb\xe4Z\x0f\xec\xbc"\x91\x95' \
      b'.\xdc^\xe4xm\x900f\xf1?\xed+\xd4\x8d%\xde\x94\xa5\xf2u5\xaf\x8d\x840\xe2\'D\xf0^mJ\n\xde\x91O\xc8\xe7\xb5\xbc' \
      b'^\xc5{k\x90\xe1\xb3\xb9[\xdf4\xd4/\xc8H\\\x91\xa7\xf2\xfa\xaaO\x88]\x16r\xfbz\x80\xdfi\xd7\x93\xcd.fL\xe4' \
      b'\xb5U\x1f_\xbb\xea\xf3\xd6 \xb5\x98\x0b\x01Lj\x85\x9e\xe9\xc73\x97\x9d/\xc5\xf7\x96\xca?#\xa3|K\x10\xe0rm' \
      b'\xa1k\xd6a\xb8]\xefr\xb4\xb5\xb5\x1b\xef\xb3A\xbe\x0f\xe0P\x95\xe0\xc4\x97\xb2TZ\xb3NKUHI\xf08\xfbk\xab\xf0' \
      b'\x00\x04#%\x19\xb30\x02\xc7\xe6\x89|E\xc3\xe9U\xac\x9f\x06\x19\xe7\xdcp\x15V\x89\xa0O\xd3\xd8z\x1d\x87LM\xca' \
      b'\xf5\x1aN\xa7\xb1a\xccE\x02\x8ci\xea \xf1\x99<\x95\x134\x9c^\xc5zi\x90\xda\x18\x0f\x03q\xb5\xa6\xa9$~\x9d\xa7' \
      b'\xf2\x97\x1aN\x15\xb0\x1b\xde\x8d\xdc\xa5\xac\xe5\x9e,\x91\xe7(9=\t\xf7\xd3 ' \
      b'\x11G!H5\x1d%1\x96\xa7\x92h8U\xc1\x86\x11\xaf\x13\xc1\xc1\x9azX\xc73\xf2I)\x0e\xa5\xf3\xfa\xf1\xd3 ' \
      b'1?\x05@\xf5\'\x04\x81\x83\xf3D~\xd8\x8d\xb3\xa5\x16\xb3\xd8\x18\xf5AM\xed3\xc0\x1b\x96%\xf2-\r\xa7\x17\xb1' \
      b'^\x1a$\x8c\xf9\x03\x01\x0e\xd144\x1b\xc0@\xd5\xde\x9a\x97\xad\xbf\x16\xb3\xf8\xd9\xf6\xaa\xb2\xf8\r_\xd4?\x9c' \
      b'\'r\xb6\x86\xd3\x8bX/\rR\x8bx\x17\x04\xa5\xff\xc6.\xce\x96\xcaS\xe9\xda\x93MfO\x99\x17<\xac\x9a\xc0\xc4\xb7' \
      b'\xb3T\x8eRqz\x10\xec\xabA\x1e\x85`{E?\xff-K\xa4\xd8\xc9\xd7\xb5O-\xe2/!XPz\x00\xc4\x8dY*\x07\x95\xc6\xf7(' \
      b'\xd0?\x83\x14\xef\x06Vc\xbd\xaa\x9f\xc4\xb9Y*\xe3*N\xc5\xc0a\xc4\x7f\x17\xc1\x1b\xcb\x96E\xe0wy"{' \
      b'\x96\xc5\xf7*\xce;\x83\xcc\x8f\xf9gs\x00\xd5\xc6 \x02\xa7\xe4\x89\\\xd4\xcd\x93 \x8c\xf8i\x11\xfc}\xd91\x90x(' \
      b'Oe~Y|\xaf\xe2\xbc3\xc8p\xc4\xbd\xfa\x04wh\x1aZ\x07\x8e\x9bJD\xbddC\x93\xa3\xd5\xd8\x91\x88i ' \
      b'\x18\xd5\xe4\xc9\x12\xf1n~l\xaa\x8fw\x02\xd4\xc6\xb8;\x88\xdfk&\n\x80\xb7g\x89\\\xa6\xe4T\n\x1eF\xbc@\x04\xa7' \
      b'\x96-\x8a\xc0\xc3y";\x95\xc5\xf7*\xce;\x83\x14W\x18H\x80\x07T\r%N\xcaR\xb9D\xc5\xa9\x188\x8c\xf8\x19\x11\xbc' \
      b'\xablY\xc5\x9e\x97<\x91]\xcb\xe2{\x15\xe7\x9dA\x8a{\x04\xfb\x07\xa1\xda\x10D\xe2\xac<\x95E\xdd<\t\xecK\xba[' \
      b'\xf7\xbc3H!S-&5r\x11\xb8,O\xe4\xed\x1aN\xd5\xb0a\xc4;D\xb0W\xd9\xbaH\xfc,' \
      b'O\xa5\xa1\xe3\x84\xca\xe6\xaa2\xceK\x83\x84\x11\x8b\x8dD\xa5\x8f\xf3\xec\xfa\xc92\xce\xfep5\xd6\n\x10\x94\x9d' \
      b'\x8c\x04\x96\xe4\x89\xbc\xa5,\xbeWq^\x1a\xa4\x16\xb3\xb8\xecR\xf5\x968\x1b\xc0\xf6\xddze\xc0\xd0B\x1e\xd4\xdf' \
      b'\x87\x1b4\x93\x98\xc49y*\xe7k8\xbd\x88\xf5\xd2 ' \
      b'a\xc4\t\x11\xc4\x9a\x86\xd6\x89\xa3\xa6R\xf9\xb6\x86S\x15\xac\xcbx!xc6!\xdf\xa8\xca\x18:U\x87\x97\x06q\xd9' \
      b'\x8a\xda\xcd\x9b\x88\xb4\xdf?\x8a\xc9\xb8v\x06\xbb\xaf\\,' \
      b'wwjbV%\xaf\x97\x06\xd9\xe1\x0c\x8e\x0c\xf4#\xd74\x81\xc4#\xf9z\xec\x82\x0bd\xb5\x86\xd7i\xec\xfc\x98\xfb\xcc' \
      b'\x01nS\xd5A\xdc\x9d\xa5\xb2\xbb\x8a\xd3\xa3`/\rR\xf42\x8cy\x8b\xc3\xa1\xcf\xef\xcd\x12\xf9\xe7n\x9a\x0ba\xc4' \
      b'%"8VS3\x81\x8b\xf2DN\xd1pz\x15\xeb\xadA\\6\x11\x11\xb83O\xa4\xf4O\xa5\x9d\x9e4\x1b.!u9\x81\xe5\xf0,' \
      b'\x11\xd5\x96\xe4N\x8f\xb5U\xf9\xbd5\x88\xeb\xe9\x83\xdd\xb4.K\xfb\xf6\xbc\x98d\xb6\xc4\xe4\xc9V\xf3\xd6 ' \
      b'\x85\x0c\xb5\x98\xb7\x03x\xbe\xf2\x7f\x9f\xbb\xb2\x01\xecY\xf5\xab\x947\xdc\x1d\xf2+\xcd\xbb\x8f\r\x06\xf9D' \
      b'\x9e\xc8\xfb\x94\x9a\xf4,\xdck\x83\x8c\xc4<1\x00\xfe\xc5\xa1\xbb\x95\xff.\xa2]Z\xf2\x84\x063\xc4\xde\xcbR\xf9' \
      b'\x95\x83&=I\xf1\xda 8\x8d\x03\xb5\xb9\x98R_\xbbF<\xb6.\xc0\x82\xaa^\x15P\\\xd1\xd6\'P\xbf\xc3 ' \
      b'q}\x9e\x8aj\xaf~O\xbab\xa3A\xf9m\x90\xe2\xd7\xac\x88\x1f\x13\x81\xfe\x17\x1b\xe2\xe6,' \
      b'\x95\x03\xaa6A6\\\x7fp\x9b\x00\xf3\xd4\xb5\xd9\xcb\xc1\xa7H\xe6\xbdAjgq\x17\xcc\xc0\xe9\xfc\'\x02\x13y"g\xaa' \
      b'\'b\x0b\ta\xcc\x9b\x05\xd8_\x9b\x82\xc0\x7f\xe5\x89\xbcD\xcb\xebu\xbc\xf7\x06\x99}\'\x12\xf1C"p:\xe2\xa6J' \
      b'\xe7G\x8d\xc4\xbc$\x00\xde\xe32i\xa7g\xf0\xb2\xe5\x8b\xa5\xb8\x9d\xca\x1e\xfb\x13k\x9390\xce\xc1\xda*\xdc\x07' \
      b'\xc1\x90zv\x10\xab\xa7\x05\xfb/O\xe4\xbf\xd5\xdc&\x12\\\x96\xcf<\x91\x9e\xc4\xd5y*\x877\xb1\x9c\x9e\te\x9f ' \
      b'\x1bZ\x19\xc6<Y\x80\x8f;u\x96\xf8\xc3\xbau\xd8\xf7\xa1\x0b\xe5!\'~\x83\xa4\xa1\x98\xcf\xef\x07\x8a\x9f\xac' \
      b'\x9d\x9e\xf53\xd8g\xc5bq\xe6;%\xed\x12\x92\x19d\xa3F\xd5"\xde\x04\xc1K]zG\xe2{' \
      b'y*G\xb8p\x1b\xe2\x9c\xc6\x81p.\x8a/\xe5\x7f\xe1\x12\x87\xc4\xf9y*\xe7\xb8p}\xe0\x98A66\xc8(\xf7@0{' \
      b'\xe2\xc9\\\x97\xe6\xd7\xeb8}jR\\o\xccuIY|\x7f\xfa\xbc\x08\x9cv;\xce\x9e\x18y7\xf6\xc1We\xc6)\xb9\x07$3\xc8&M' \
      b'\xae\xc5\x8c\x008\x9f\xe2^\x0f\xf0\xbc\xa9E\xf2\x9bv\xcc\x1d\xd7\xf7\x1dO\xd4V\xafc\xbf\xa9I\xf9Y;j\xed\xd6' \
      b'\x1cf\x90\xcdt\xae\x16\xf1\'\x10\x1c\xe8\xd2T\x02\xdf\xcd\x139\xd2\x85\xab\xe5\xd4b\x16\xfb5\xfe\\\xcb\x9b' \
      b'\xc5\x13\xe7e\xa9\xa8N|w\xca\xd3\xe5$3\xc8f\x1a8\xefL\x86\x833\xb8\x1d\x82\x9aK\x7f\xdbqUB\x18sL\x00\xa7\x93V' \
      b'\x08\xfc0O\x8a\xd3\xedEux\x85\x8b\x16\xdd\xce1\x83l\xa1\x83C\x11\x0f\xec\x178\xbd\x17 ' \
      b'\xf0\xf3<\x91\x17\xb7jr\x14G\x17\xf5\r\xe2\x8f.o\xcbI\xdc\xbf\xa6\x0f\xfb>\xb2H\x96\xb5\xaa\xbe^\x8ak\x06' \
      b'\xd9J7\x1bX\xcc\x88i\xe2\xa0\xe5\xa9\xdc\xd8\x8a\xc9\x12F<E\x04\x1f\xd3\xc6&\xb1\x1e\x01\x0e\xc8\'\xe4\xe7Z' \
      b'\xae\xafx3\xc86:\xef\xb2\xa7bC\xc8\x96]\x99\x10\xc6\xfc\xad\xe3\xcf\xba\x95_\x85\\5#\x9aAJt\xc4\xf5\xfd\xc8Z' \
      b'\xc1\xd0\xca\tYQ"Ei\xc8\xf0\x18\x0f\xed#\x8a+\xac\xb5\xcf\xe5Y"\xc7iI\xbe\xe3\xcd ' \
      b'%f\xc0\xd0\x19\xdc\xbb\xaf\x0f\xb7\x8b@\xabW\xd3\x0f\xbd\xae\xc5,' \
      b'\xf6\xaf\x9cX\xa2\xec?A\x8a\xab\x0c\x82:\x9e\xf9\xe0byL\xc33,' \
      b'\xd4\r\xf7V\xb3Z\xcc\xaf\x038Z)\xc07\xb2DJ_ZS&v-\xe22\xed\x9a1\x02\x1f\xc8\x13\xf9P\x99\xf8\x86y\xb2\x02\xda' \
      b'\xff\x11\xbd\xd5od\x8c\xfb\x05\xc4-J\x01\xd6d\x89\x0c(9[\x84;\x9d\x90\x08<Jb\xd7\xa9T\x1eiV\x1d>\xc51\x83(' \
      b'\xba\xedr\xdf\xf8\x0cq\xc0\xb2TnV\xa4\xd9"t$\xe2\x19\x81`\xb1&V\x1dH\xa7\x12Q\x9d"\xa9\x89\xdf\xebX3\x88\xa2' \
      b'\xc3a\xcc\xf7\x0bp\xa1\x82R\xbc\xb1~O\x96\x8a\xcb\xbe\xf7\xa7\xa4\xa9E\xbc\x1c\x02\xd5\x81\xd2\xcd4\xa8j\xdc' \
      b'=\x026\x83(\x1a\xe9r}\x1b\x80Og\x89\xbc[' \
      b'\x91f\x8b\xd00\xe6\xaf\x05xn\xd9X\x04V\xe6\x89\xec\\\x16o\xb8\xa7*`\x06Q\xce\x8aZ\xcc\xe2\x90\x87\xe1\xb24' \
      b'\x02K\xf3D^Y\x16\xbf5\x9c\xf6^\x13\x10\xdf\xccR\xd1\xfe\xb0\xd0\x8cR{' \
      b'&\x86\x19D\xd9\xca0\xe6\xd5\x02\x1cV\x96\xd6\xac\xeb\x94\x87N\xe7\xb3\xfa\xe7\xe0\xde\xb2y\x0b\x9c]a\xa0Qk' \
      b'\xf3X3\x88R\xc30\xe6\xc5\x02\x9cT\x966{\xe8u*;\x96\xc5o\t\xe7r\x12$\x897\xe7\xa9|\xad\xd1\xdc>\xf3\xcd ' \
      b'\xca\xee\x8fD\xfc@ \xf8\'\r\xad\x19\xd7)\x8f\xc4<"\x00\xae\xd0\xe4%\xf0\xca<\x91\xa5\x1a\x8ea\x9f\xac\x80' \
      b'\x19D9#\\~\xc9\x92\x19\xcck\xf4-\xb6\xcb\xe6(' \
      b'\xdbk\xael\xeef\xe0f\x10\xa5\x86\xb5\x98\x0b\x01Ljh\xd9\x00\x060.k4\x9cM\xb1\xc31\x8f\xea\x03\x8a\xab\xe3\xca' \
      b'?3xa\xb6Xtw\x83\x94\x8f\xee\x05\xd2\x0c\xa2ls\x18\xf3\x1c\x01\xce\xd3\xd0\x9a\xf2\'\xd6(' \
      b'\x8f\x0c\x02|G\x93\xb7\x95K\xee5ut3\xd6\x0c\xa2\xec^\x18\xf3\xe3\x02\x9c\xac\xa15\xc9 ' \
      b'\x07\x07\x01\xae\xd3\xe4\xad\x03o\x99Jd\x89\x86cX\xfb\x0e\xd2\xd0\x1cpX\xb4xO\x96\xc8s\x1aJ\n`\xe73\xf8\xec' \
      b'\xb9\xfd\xb8G\x13\xa7N|p*\x15\xd5\xa7\x9d&\xbe\x0fX\xfb\x04Qv9\x8c\xb8B\x04\x9a\xb7\xd37d\x89\xbc\\\x99f\xb3' \
      b'\xf00\xe6z\x01\xfaK\xc7"\xae\xc9R)\xfd\xce\xa6t\\\x8f\x80f\x10E\xb3\xc3Q\xee+\x01T\xdbU\t,' \
      b'\xc9\x13Q\xad\x9f\xdaRI\xda\xa5& Vg\xa9\x0c*\x86h\xd0M\x140\x83(' \
      b'\xa6\xc4H\xcc$\x00\x8as\xb3J?\x04N\xcd\x13Q\xef\x1f\xdf\\\x820\xe6\x97\x058\xa6t\xf2\x02H\xbc)K\xa5\xd8\xcbb' \
      b'\x8f\x83\x02f\x10\x85h\xb5\x98Yq\x18\xbc\x82\x82i`A\xb3\x0e\xb6\x0ec\x9e$\xc0\xc5\x9a\xfc$\xae\xcaSy\x9d\x86c' \
      b'\xd8\xffW\xc0\x0cRr68\x1dnMdY*\xbb\x94L\xb1M\x98\xeb]&3\x01\x0e\\\xb6Hn\xdaf\x02\x03<E\x013H\x89I1\x14\xf1' \
      b'\x99\xfd\xc0\x9d\x10l_\x02\xbe1\xa4\xe9\x07%\x84\x11\x97\x8a@\xf5\xa5\x9f\xc0\xady"\xfb*k78lO\xfa\xb6\'Aqw' \
      b'\xc8j\x14\xe7[\xed\xb3m\xf0\x93\x11u\xe2\xa8\xa9T\xbe\xad\xe5m\r\xef\xb2\xd4e\xf6\xab\x08\xf1\xb9<\x95w6\xb3' \
      b'\x16\x1fb\xd9\'\xc8V\xba<\xfb\xee\xa1\x0fK\x1c\xcf\xe9m\xca\xfb\x8fM\xcb\x1b\x89\xb8k ' \
      b'\xf8\xa3\xcb\xe4$\xf1e\x02\'\xd8\xfe\xf4\xf2\xea\x99A\xb6\xa0\xd5H\xc4SEp\x9e\xcb\xf1\x9e\x1bB\x8ef\x89\xa8' \
      b'\xf6\x8f\x97m[\x18\xf3R\x01\x9c>\rH\xdc\'\xc0\xbb\xb2T\xae)\x9b\xcfg\\W\x18d\xfeB.\xe8\xeb\xc7H\xab\x1b\x15' \
      b'\xd41\x87\x82W\x018F\xb3\xb5u3u\xadY+\xd8\xb5\xd9\x87\xc6=\x91g\xf8l\xee\xd67\x8d\xfb\x1b\xd1\xa3\xf8^\x02' \
      b'\xe2*\x04\xb8\xb3\x0e\xdc+@\xbd\x91x\xdb\xe2\x06\xc0\xbd\xd9\x84\xdc\xb5-\\\xd5\xfe\xbd+\x0c\x12F\xbcW\x04' \
      b'\xcf\xaa\x9ax[\xac\xa7\rW\x0b\xd4b~\x14\xc0i\xdd\xa2I\xc7n\xe0jP\xa0\xca\x1b\xa46\xc6\xddA\xfc\xbe\xc1q\xb6' \
      b'\x8dN\xe2\xb7y*\xa5\x0fVp-l\xc7\xd38\xb4\xdd\\\xdc.\xc03\\c\xb4\x95G<\x96\xa5\xa2\xbf\xbb\xbd\xadE>5Y\xf5\r' \
      b'\x12\xb3\xb8\xd6\xf8\x92\x0e\xebT:};\x8f\xd9\tc\xbeJ\x80\xebK\x17\xd7a`]\xf0\xea\xa9\tQ\xadH\xeep\xc9\xd5?z' \
      b'\xd4a\xf5l\xc74%qq\x9e\x8aj)|\xa3\xc5\xd6b~\x04\xc0\xe9\x8d\xc6i\x07\x9f\xc0\x87\xf3D\x9c\xee\xa3oG}\x9b\xcbQ' \
      b'\xf9O\x900\xe6J\x01\x1a>\xf4\xa0\xd5\x02\xb7\xf3\xea\xb5M\xc7\x12\xc6\xbcY\x80\xfd[' \
      b'=\xc6F\xe3\x13\xf8i\x9e\x88\xd3-\xc2\x8d\xe6v\xe5W\xda \xb5\x98/\x03\xf0c\xd7\xc1\xb5\x8b7{' \
      b'\xa3\xd4*\x1c\x84\x8bdm\xbbrn\x9cg\xf6\xc6\xa9\x01\xfc@\x04-\xbb\xd5\xaa\x19\xe3"\xc1i\xc1\xfc\x15\x89\xaclF' \
      b'\xbcv\xc4\xa8\xb6A"\xfe#\x04\xe3\xed\x10\xc25\x07\x89[' \
      b'\xd6\xf4\xe1\xf0N_i6?\xe6N\xfd\xc4\xb5"x\x89\xebX\xda\xc1c\x1d\xc7\xe4\x93\xf2\xd5v\xe4jF\x8eJ\x1b\xc4e' \
      b'\xddQ3D)\x1b\x83\xc0D\x9e\xc8\x99e\xf1\xad\xc6\x15\x9f$\xfd\x03\xb8\x04\x82*_\x94\xd3\xb4\xa3X[' \
      b'\xadg\x11\xbf\xb2\x06\x19\x89\xb8C x\xb8\x1d"hs\x10x\xa0N\xbcmY*.7=i\xd3\xa9\xf1\xb5\x88\xaf!piE\xdf\x1d\xdd' \
      b'\x9b%\xf2l\xf5\xa0:D\xa8\xb2A\xfe&\x10|\xabC\xbal1-\x89\xf3\x83:\x165z\xceU\xab\xc7\x15\x8es\x9e\xac\x9a\xdd' \
      b'\xdcu\xba\xc3*\xe4\x96\x96G\xc1\x9e\xf9\x84\xfc\xae\xa5I\x9a\x14\xbc\xb2\x06\t#^$\x82\xf75i\x9c\x8d\x86YC\xe2' \
      b'\n\t\x10w\xdbr\x89\xe2\x85\xe2\xd3\xe6\xe0,\x00\xef\x85\xa0i\x97\xf94$(' \
      b'qR\x96JW\xbc\xdb\xaa\xb2A~#\x82=\x1bj\x84#\x99\xc4\xff\x00\xb3o\xef\x97\x12\xb8f*\x95\x1f8\x86\xaa\x0em\x9c' \
      b'\x83\xe1j\x1c\x0c\xe0\xb5\x02\x1c\xea\xb2|\xbfi\x83\xe9\xa2S\xe7+i\x10\xc7\x93\xcc\x7f\xcd\x00\xff\xe0\xdc' \
      b'\xc4\x19\x10\xfdx`j\x91\xfc\xc69F\x97\x11\x8b\x1d\x8a\xf5i\xec\xcc>\xec,' \
      b't\xfct\xa9C\x02\xe0\xbb\x9aO\'\x02\x0f\xe7\x89\xec\xd4\rrU\xd2 ' \
      b'#1O\x08\x80O)\x05\xfch\x96\xc8\x19J\x8e\xc1\x9b\xa0\x80\xf6J\x88\xd9\x94u\xbc"\x9b\x94\xca\xbf\xe3\xaa\xa4A' \
      b'\xc2\x88_\x11\xc1\x9b5\xbdc\x1d\xaf\xcb\'\xe5*\r\xc7\xb0\xcdQ\xc0\xe5\xeeD\x10\xe7f\xa9T\xfa\x1dW\xa1NU\r\xa2' \
      b';\x9c\x8dX\x9b\rbG\x8c\xcb\xba\xe6\xb4\xdc\xa2h\x14\xa8-\xe4\x0b\xd0\x87[' \
      b'5\x1c\x00M;PO\x99W\x05\xaf\x9cA\\.\x8a\x01\xf0\x9fY"\x7f\xa5\x1a\xb9\x81\x9b\xaa@-\xe2\x83\x10\xd4\xca\x06' \
      b'-\x96\x9d\xe4\x83\x98\x87qYU\x96\xd3\t\\\xe5\x0c\x12F<[' \
      b'\x04\xaaK\xefI\x8c\xe5\xa9$\x9d\x10\xd0r>\xae@-\xe6\xbf\x028^\xa3\xc7\x0cq\xf4\xb2TtW:h\x124\x01[' \
      b'E\x83\\\'2\xfbsd\xe9\x87\x82\x17\xe7\x13\xa2:\x12\xb4tp\x03\x96R\xa0\x16\xf3o\x01|\xa1\x14x\x03\x88\xc4%y' \
      b'*\xa5\xaf\xb3\xd3\xc4n\x16\xb6Z\x06y\xfc\xb7\xfaby{' \
      b'\xe9\x03\x9aI<\x94\xa72\xbfY\x82X\x1c7\x05\xe6\x9d\xc9p\xb0\x8e\xe2\xe4\xc9\xd2O\xb3.8-\x9d\xd0\x01X)\x83\xb8' \
      b'\xdc\xc3\x07\xe2KY*ou\x18\xbbQ\x9a\xac@-\xe2/!X\xa0\t;M<ky*\r\x1d@\xa1\xc9\xa7\xc5V\xca ' \
      b'a\xcc\x0b\x05x\xbff\x10$\xde\x99\xa7\xf29\r\xc7\xb0\xadQ\xc0\xe5 ' \
      b'\x89:\xf0\xee\xa9D>\xdd\x9a\x8a\x1a\x8fZ-\x83D\xbcC\x04{i\x86\xb5*@\xed\xd1E\x92k8\x86m\x8d\x02\xe1(' \
      b'\x0f\x97\x00Wj\xa2\x93\xf8Z\x9e\x8a\xea\x9d\x97&~\xa3\xd8\xca\x18\xc4\xe5oX\x00wd\x89<\xbfQ\x11\x8c\xdf$\x05' \
      b'\xc697\\\x8d\xc7z\xe9;de\x0c\x12F|\x87\x08>\xabi\x15\x81\x8f\xe5\x89\x9c\xaa\xe1\x18\xb6\xb5\n\xd4b\x16{' \
      b'd\x8a\xc5\x90\xa5\x9f\x19\xc1K\x97M\xc8OK\x13\xda\x08\xac\x8cAj\x11/\x87@u\x13\x13\xeb8"\x9f\x94\xef\xb5Q/K' \
      b'\xb5\r\x05\xc2\x98c\x02,\xd2\x08E\xe2\x9c<\x95\xf35\x9cva+c\x10\xed\xdd\x7f\x04\xa6\xf3\x01lo\xcbK\xda5U\xca' \
      b'\xe5\x19\x19\xe3~\x01qK9\xf4\xe3(\x12\xd7\xe7\xa9\x1c\xa2\xe1\xb4\x0b[' \
      b'\t\x83\x84c|\x91\x10?\xd3\x0c\x9a\xc0uy"\xaf\xd6p\x0c\xdb\x1e\x05\x1c\xff\xb3\xdb\xa9\x8a\xcbN*a\x90Z\xccbk' \
      b'\xa8j\xa9\x08\x89\xb3\xf2TT\x1f\xe5\xed\x99\x1e\x96%\x8c\xb8D\x04\xc7j\x94\xa8\x03GN%\xf2]\r\xa7\x1d\xd8j' \
      b'\x18$\xe2\xb5\x10\xa8\x16\x1b\xd6\x89\xfd\xa7RQ}\x94\xb7CP\xcb\x01\x84c|\xa7\x10\x97j\xb4\xa8\xea\x0f.\x9d7' \
      b'\xc88\xe7\xd6V\xe1a\x08\xb6++\xa8-/)\xabTgp\xb3W\xd6\t\xeeSf\xaf\xe4O\xf6\x1d7Hm\x8c\x87\x81\xb8Z)\xe6] ' \
      b'\x8a\xd5\xa3\xf6TW\x81\x85\xda\xd3T\xea\xc4nS\xa9\x14\xe7\x01T\xe6\xe9\xbcA".\x86\xc0\xb6\xcaVfJt\xae\x10\n' \
      b'\xde\x91O\xc8\xe7;W\xc1S3W\xc1 \xb7B\xf0\x82*\x89b\xb5tL\x81\xa6\xdf\n\xdc\xe8H:j\x10\xc7\xe5%\x8d\x8e\xd9' \
      b'\xf8\x15U\xa0\x8a\xdf-;j\x90\xe1\x98\xc7\xf7\xc1\xbeKTt\xbev\xa4,' \
      b'\xd6\xf1\xa2|R~\xd1\x91\xe4\x9bI\xdaQ\x83\xd4"^\x06\xc1\xdb\xaa"\x86\xd5Q\x01\x05\x88(' \
      b'Ke\xb2\x02\x95\xcc\x96\xd0i\x83\xa86\xfaWE4\xab\xa3\xa5\n\\\x9b%\xf2\x9a\x96fP\x04\xef\x98A\xe6\xc7\xdcg\x0ep' \
      b'\x9b\xa2V\x83\xfa\xa0@\xc5\x8ep\xea\x98AFb\x9e\x1e\x00\xc5\xfdz\xf6\x98\x02OV\x808,' \
      b'K\xe5\x9a*\xc8\xd21\x83\x84\x11\xaf\x14\xc1\xe1U\x10\xc1j\xa8\x9c\x02\x8b\xb3DF\xabPUg\x0c\xe2\xb0\xbc\xa4' \
      b'\nbY\r\xedQ\x80\xc0\xady"\xfb\xb6\'\xdb\xd6\xb3t\xc4 ' \
      b'\xc3c<\xb4\x8f\xa8\xe4\xedLUh\x8a\xd5\x00T\xe5\xac\x81\x8e\x18$\x8c8!\x82\xd8&\x82)\xb0%\x05\xea\xc4\xf1S\xa9' \
      b'|\xb1\xd3\nu\xc4 \x9d\x1e\xb4\xe57\x05\xca*`\x06)\xab\x94\xe1\xbcT\xc0\x0c\xe2e\xdbm\xd0e\x150\x83\x94U\xcap' \
      b'^*`\x06\xf1\xb2\xed6\xe8\xb2\n\x98A\xca*e8/\x150\x83x\xd9v\x1btY\x05\xcc ' \
      b'e\x952\x9c\x97\n\x98A\xbcl\xbb\r\xba\xac\x02f\x90\xb2J\x19\xceK\x05\xcc ' \
      b'^\xb6\xdd\x06]V\x013HY\xa5\x0c\xe7\xa5\x02f\x10/\xdbn\x83.\xab\x80\x19\xa4\xacR\x86\xf3R\x81\xb6\x1a\xa4\x16' \
      b'\xf3eu\xc1\\/\x95\xb6A;+0\xf54\xdc\x88qY\xe3\x1c\xa0\x01b{' \
      b'\r\x121\x87`\xa4\x81z\x8d\xea\xa3\x02\x82=\xb2\t\xb9\xab\x13C7\x83tBu\xcb\xa9S\xc0\x0c\xa2\xd3\xcb\xd0\x9e' \
      b')`\x06\xf1\xac\xe16\\\x9d\x02f\x10\x9d^\x86\xf6L\x013\x88g\r\xb7\xe1\xea\x140\x83\xe8\xf42\xb4g\n\x98A<k\xb8' \
      b'\rW\xa7\x80\x19D\xa7\x97\xa1=S\xc0\x0c\xe2Y\xc3m\xb8:\x05\xcc ' \
      b':\xbd\x0c\xed\x99\x02f\x10\xcf\x1an\xc3\xd5)\xe0\x8dAl\xb1\xa2nb\x18zV\x01o\x16+Z\xbfM\x81nS\xa0\xad\x8b\x15' \
      b'\xbbM\x1c\xab\xd7\x140\x83\xd8\x1c0\x05\xb6\xa2\x80\x19\xc4\xa6\x87)`\x06\xb19`\n\xb8)`\x9f ' \
      b'n\xba\x19\xcb\x13\x05\xcc \x9e4\xda\x86\xe9\xa6\x80\x19\xc4M7cy\xa2\x80\x19\xc4\x93F\xdb0\xdd\x140\x83\xb8' \
      b'\xe9f,O\x140\x83x\xd2h\x1b\xa6\x9b\x02f\x107\xdd\x8c\xe5\x89\x02f\x10O\x1am\xc3tS\xc0\x0c\xe2\xa6\x9b\xb1<Q' \
      b'\xc0\x0c\xe2I\xa3m\x98n\n\x98A\xdct3\x96\'\n\x98A<i\xb4\r\xd3M\x013\x88\x9bn\xc6\xf2D\x013\x88\'\x8d\xb6a\xba' \
      b')`\x06q\xd3\xcdX\x9e(\xf0\x7fCR\xda#\xaegA\x9e\x00\x00\x00\x00IEND\xaeB`\x82 '


class GUI:

    def __init__(self):
        theme = {'BACKGROUND': '#fef6e4',
                 'TEXT': '#172c66',
                 'INPUT': '#f3d2c1',
                 'TEXT_INPUT': '#001858',
                 'SCROLL': '#f582ae',
                 'BUTTON': ('#232946', '#eebbc3'),
                 'PROGRESS': ('#8bd3dd', '#f582ae'),
                 'BORDER': 0,
                 'SLIDER_DEPTH': 0,
                 'PROGRESS_DEPTH': 0}
        sg.theme_add_new('SD_Theme', theme)
        sg.theme('SD_Theme')
        window = self.home()
        if not os.path.exists(ROOT):
            os.mkdir(ROOT)
        else:
            window.find_element('status').update(
                '程序异常，请尝试删除“cache”文件夹后重新启动程序！', text_color="red")
        file = set()
        task = None
        while True:
            event, values = window.read(timeout=100)
            if event is None:
                if not os.listdir(ROOT):
                    os.rmdir(ROOT)
                break
            elif event == 'choice':
                cache = self.choice_file()
                if cache:
                    [file.add(i) for i in cache]
                    window.find_element('screen').update('\n'.join(file))
            elif event == 'reset':
                file = set()
                window.find_element('screen').update('当前未选择任何待检测文件！')
            elif event == '开始检测':
                if not file:
                    window.find_element('status').update('未选择文件！')
                    continue
                task = threading.Thread(
                    target=self.deal, args=(
                        window, values['A'], file))
                task.start()
            elif event == 'all':
                task = threading.Thread(
                    target=self.deal, args=(
                        window, values['A']))
                task.start()
            elif event == 'info':
                webbrowser.open(
                    'https://github.com/JoeanAmiee/Private_office_tools')
            if task:
                window['choice'].update(disabled=True)
                window['reset'].update(disabled=True)
                window['开始检测'].update(disabled=True)
                window['all'].update(disabled=True)
                sg.popup_animated(
                    sg.DEFAULT_BASE64_LOADING_GIF,
                    background_color='white',
                    transparent_color='white',
                    time_between_frames=100)
                task.join(timeout=0)
                if not task.is_alive():
                    sg.popup_animated(None)
                    task = None
                    window['choice'].update(disabled=False)
                    window['reset'].update(disabled=False)
                    window['开始检测'].update(disabled=False)
                    window['all'].update(disabled=False)
        window.close()

    @staticmethod
    def home():
        layout = [
            [sg.Multiline('当前未选择任何待检测文件！', autoscroll=True, font=('微软雅黑', 10), size=(68, 8), disabled=True,
                          key='screen')],
            [sg.Radio('仅保存异常结果', group_id='0', default=True, font=('微软雅黑', 12)),
             sg.Radio('保存全部结果', group_id='0', key='A', font=('微软雅黑', 12))],
            [sg.Button('选择文件', key='choice', font=('微软雅黑', 12), tooltip='按住 Ctrl 可选择多个 PDF 文件'),
             sg.Button('清空文件', key='reset', font=('微软雅黑', 12), tooltip='清空待检测文件列表，不会删除文件'),
             sg.Submit('开始检测', font=('微软雅黑', 12), tooltip='开始检测并识别已选择的 PDF 文件'),
             sg.Button('扫描当前目录', key='all', font=('微软雅黑', 12), tooltip='扫描并检测程序所在文件夹内全部 PDF 文件'),
             sg.Button('查看工具详细说明', key='info', font=('微软雅黑', 12))],
            [sg.StatusBar('准备就绪', key='status', text_color="black", font=('微软雅黑', 12), size=(10, 1))],
        ]
        return sg.Window(
            f'印章检测小工具 {VERSION}',
            layout,
            text_justification='center',
            element_justification='center',
            icon=ICO,
            finalize=True)

    @staticmethod
    def choice_file():
        return sg.popup_get_file(
            '',
            file_types=(
                ('PDF',
                 '*.pdf'),
            ),
            icon=ICO,
            no_window=True,
            multiple_files=True,
        )

    @staticmethod
    def deal(window, all_, file=None):
        if not file:
            pdf = os.listdir()
            log = [check_pdf(i) for i in pdf if i.endswith('.pdf')]
            save_log(log, all_)
            window.find_element('status').update('当前目录全部 PDF 文件检测完成！')
        else:
            log = [check_pdf(i) for i in file]
            save_log(log, all_)
            window.find_element('status').update('当前选择文件检测完成！')


def pdf_to_image(filename):
    """PDF生成图片"""
    doc = fitz.open(filename)
    for i in range(doc.page_count):
        page = doc[i]
        img = page.get_pixmap(matrix=MATRIX, alpha=False)
        img.save(os.path.join(ROOT, "%s.png" % i))
    doc.close()


def deal_img(num):
    """提取红色部分"""
    file = os.path.join(ROOT, f'{num}.png')
    img = cv2.imdecode(np.fromfile(file, dtype=np.uint8), -1)
    img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
    mask_1 = cv2.inRange(img_hsv, LOWER_RED_1, UPPER_RED_1)
    mask_2 = cv2.inRange(img_hsv, LOWER_RED_2, UPPER_RED_2)
    mask = mask_1 + mask_2
    # print(sum(sum(i) for i in mask))  # 调试时使用
    if sum(sum(i) for i in mask) < 150000:
        expand = cv2.dilate(mask, EXPAND)
        cv2.imwrite(file, expand)
    else:
        os.remove(file)
        # print(f'{num + 1}未生成图像！')  # 调试时使用


def read_img(num):
    """识别文件"""
    file = os.path.join(ROOT, f'{num}.png')
    img = cv2.imread(file)
    if img is None:
        return None
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    os.remove(file)
    # return stamp_ocr_test(img, gray)  # 调试时使用
    return stamp_ocr(gray)


def view_image(title, img):
    cv2.imshow(title, img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


def stamp_ocr(img):
    """识别圆形"""
    circles = cv2.HoughCircles(
        img,
        cv2.HOUGH_GRADIENT,
        1,
        10,
        param1=200,
        param2=10,
        minRadius=8,
        maxRadius=16)
    try:
        for _ in circles[0]:
            return True
    except TypeError:
        return False


def stamp_ocr_test(img, gray):
    circles = cv2.HoughCircles(
        gray,
        cv2.HOUGH_GRADIENT,
        1,
        10,
        param1=200,
        param2=10,
        minRadius=8,
        maxRadius=16)
    try:
        print(f'检测到 {len(circles[0])} 个圆形！')
        for circle in circles[0]:
            x = int(circle[0])
            y = int(circle[1])
            r = int(circle[2])
            img = cv2.circle(img, (x, y), r, (0, 0, 255), 2, 8, 0)
        view_image('识别结果', img)
        return True
    except TypeError:
        print('识别圆形失败！')
        return False


def check_pdf(filename):
    pdf_to_image(filename)
    file = len(os.listdir(ROOT))
    [deal_img(i) for i in range(file)]
    result = [read_img(i) for i in range(file)]
    return filename, result


def save_log(log, all_=False):
    """保存结果数据"""
    for i, j in log:
        name, _ = os.path.splitext(i)
        data = [
            [x + 1, str(y)]
            for x, y in enumerate(j)
            if not all_ and y in [False, None] or all_
        ]
        if data:
            data = pd.DataFrame(data, columns=['页码', '状态'])
            data.to_excel(f'{name}.xlsx')
        else:
            data = pd.DataFrame([])
            data.to_excel(f'{name}_正常.xlsx')


def main():
    GUI()


if __name__ == '__main__':
    main()
